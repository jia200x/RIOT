From c2bfc7244ebbec1aa6203cf18829c670164568e7 Mon Sep 17 00:00:00 2001
From: Francisco <femolina@uc.cl>
Date: Wed, 14 Dec 2016 10:56:27 -0300
Subject: [PATCH] fixed new cmac style

---
 src/mac/LoRaMacCrypto.c | 72 ++++++++++++++++++++++++-------------------------
 1 file changed, 36 insertions(+), 36 deletions(-)

diff --git a/src/mac/LoRaMacCrypto.c b/src/mac/LoRaMacCrypto.c
index 13bf40d..b39773d 100644
--- a/src/mac/LoRaMacCrypto.c
+++ b/src/mac/LoRaMacCrypto.c
@@ -19,10 +19,10 @@ Maintainer: Miguel Luis ( Semtech ), Gregory Cristian ( Semtech ) and Daniel Jä
 */
 #include <stdlib.h>
 #include <stdint.h>
-#include "loramac/utilities.h"
+#include "loramac/utilities.h"
 
-#include "crypto/ciphers.h"
-#include "hashes/cmac.h"
+#include "crypto/ciphers.h"
+#include "hashes/cmac.h"
 
 #include "LoRaMacCrypto.h"
 
@@ -32,12 +32,12 @@ Maintainer: Miguel Luis ( Semtech ), Gregory Cristian ( Semtech ) and Daniel Jä
 #define LORAMAC_MIC_BLOCK_B0_SIZE                   16
 
 /*!
- * Key size
- */
-#define KEYSIZE                                     16
-
-
-/*!
+ * Key size
+ */
+#define KEYSIZE                                     16
+
+
+/*!
  * MIC field computation initial data
  */
 static uint8_t MicBlockB0[] = { 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
@@ -49,7 +49,7 @@ static uint8_t MicBlockB0[] = { 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  *
  * \remark Only the 4 first bytes are used
  */
-static uint8_t digest[16];
+static uint8_t digest[16];
 
 /*!
  * Encryption aBlock and sBlock
@@ -62,16 +62,16 @@ static uint8_t sBlock[] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                           };
 
 /*!
- * CMAC computation context variable
+ * CMAC computation context variable
  */
-
-static cmac_context CmacContext;
+
+static cmac_context_t CmacContext;
 
 /*!
- * Aes computation context variable
+ * Aes computation context variable
  */
-
-static cipher_t    AesContext;;
+
+static cipher_t    AesContext;;
 
 /*!
  * \brief Computes the LoRaMAC frame MIC field  
@@ -100,12 +100,12 @@ void LoRaMacComputeMic( const uint8_t *buffer, uint16_t size, const uint8_t *key
 
     MicBlockB0[15] = size & 0xFF;
 
-    cmac_init(&CmacContext, key, KEYSIZE);
-    cmac_update(&CmacContext, MicBlockB0, LORAMAC_MIC_BLOCK_B0_SIZE );
-    cmac_update(&CmacContext, buffer, size);
-    cmac_final(&CmacContext, digest);
+    cmac_init(&CmacContext, key, KEYSIZE);
+    cmac_update(&CmacContext, MicBlockB0, LORAMAC_MIC_BLOCK_B0_SIZE );
+    cmac_update(&CmacContext, buffer, size);
+    cmac_final(&CmacContext, digest);
 
-    *mic = ( uint32_t )( ( uint32_t )digest[3] << 24 | ( uint32_t )digest[2] << 16 | ( uint32_t )digest[1] << 8 | ( uint32_t )digest[0] );
+    *mic = ( uint32_t )( ( uint32_t )digest[3] << 24 | ( uint32_t )digest[2] << 16 | ( uint32_t )digest[1] << 8 | ( uint32_t )digest[0] );
 }
 
 void LoRaMacPayloadEncrypt( const uint8_t *buffer, uint16_t size, const uint8_t *key, uint32_t address, uint8_t dir, uint32_t sequenceCounter, uint8_t *encBuffer )
@@ -114,7 +114,7 @@ void LoRaMacPayloadEncrypt( const uint8_t *buffer, uint16_t size, const uint8_t
     uint8_t bufferIndex = 0;
     uint16_t ctr = 1;
 
-    cipher_init(&AesContext, CIPHER_AES_128, key, KEYSIZE);
+    cipher_init(&AesContext, CIPHER_AES_128, key, KEYSIZE);
 
     aBlock[5] = dir;
 
@@ -132,7 +132,7 @@ void LoRaMacPayloadEncrypt( const uint8_t *buffer, uint16_t size, const uint8_t
     {
         aBlock[15] = ( ( ctr ) & 0xFF );
         ctr++;
-        cipher_encrypt(&AesContext, aBlock, sBlock);
+        cipher_encrypt(&AesContext, aBlock, sBlock);
         for( i = 0; i < 16; i++ )
         {
             encBuffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
@@ -144,7 +144,7 @@ void LoRaMacPayloadEncrypt( const uint8_t *buffer, uint16_t size, const uint8_t
     if( size > 0 )
     {
         aBlock[15] = ( ( ctr ) & 0xFF );
-        cipher_encrypt(&AesContext, aBlock, sBlock);
+        cipher_encrypt(&AesContext, aBlock, sBlock);
         for( i = 0; i < size; i++ )
         {
             encBuffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
@@ -159,22 +159,22 @@ void LoRaMacPayloadDecrypt( const uint8_t *buffer, uint16_t size, const uint8_t
 
 void LoRaMacJoinComputeMic( const uint8_t *buffer, uint16_t size, const uint8_t *key, uint32_t *mic )
 {
-    cmac_init(&CmacContext, key, KEYSIZE);
-    cmac_update(&CmacContext, buffer, size);
-    cmac_final(&CmacContext, digest);
+    cmac_init(&CmacContext, key, KEYSIZE);
+    cmac_update(&CmacContext, buffer, size);
+    cmac_final(&CmacContext, digest);
 
-    *mic = ( uint32_t )( ( uint32_t )digest[3] << 24 | ( uint32_t )digest[2] << 16 | ( uint32_t )digest[1] << 8 | ( uint32_t )digest[0] );
+    *mic = ( uint32_t )( ( uint32_t )digest[3] << 24 | ( uint32_t )digest[2] << 16 | ( uint32_t )digest[1] << 8 | ( uint32_t )digest[0] );
 }
 
 void LoRaMacJoinDecrypt( const uint8_t *buffer, uint16_t size, const uint8_t *key, uint8_t *decBuffer )
 {
-    cipher_init(&AesContext, CIPHER_AES_128, key, KEYSIZE);
-    cipher_encrypt(&AesContext, buffer, decBuffer);
-
+    cipher_init(&AesContext, CIPHER_AES_128, key, KEYSIZE);
+    cipher_encrypt(&AesContext, buffer, decBuffer);
+
     // Check if optional CFList is included
     if( size >= 16 )
     {
-        cipher_encrypt(&AesContext, buffer + 16, decBuffer + 16);
+        cipher_encrypt(&AesContext, buffer + 16, decBuffer + 16);
     }
 }
 
@@ -183,18 +183,18 @@ void LoRaMacJoinComputeSKeys( const uint8_t *key, const uint8_t *appNonce, uint1
     uint8_t nonce[16];
     uint8_t *pDevNonce = ( uint8_t * )&devNonce;
     
-    cipher_init(&AesContext, CIPHER_AES_128, key, KEYSIZE);
+    cipher_init(&AesContext, CIPHER_AES_128, key, KEYSIZE);
 
     memset1( nonce, 0, sizeof( nonce ) );
     nonce[0] = 0x01;
     memcpy1( nonce + 1, appNonce, 6 );
     memcpy1( nonce + 7, pDevNonce, 2 );
-    cipher_encrypt(&AesContext, nonce, nwkSKey);
+    cipher_encrypt(&AesContext, nonce, nwkSKey);
 
     memset1( nonce, 0, sizeof( nonce ) );
     nonce[0] = 0x02;
     memcpy1( nonce + 1, appNonce, 6 );
     memcpy1( nonce + 7, pDevNonce, 2 );
-    cipher_encrypt(&AesContext, nonce, appSKey);
-
+    cipher_encrypt(&AesContext, nonce, appSKey);
+
 }
-- 
2.7.4

